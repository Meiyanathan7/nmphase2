{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM7DCdii89FsFcxoB2p+10c"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# Run this cell to create a sample dataset\n","import pandas as pd\n","import numpy as np\n","\n","# Creating synthetic dataset\n","np.random.seed(42)\n","data = pd.DataFrame({\n","    'age': np.random.randint(20, 80, 500),\n","    'glucose': np.random.randint(70, 200, 500),\n","    'blood_pressure': np.random.randint(60, 140, 500),\n","    'cholesterol': np.random.randint(100, 300, 500),\n","    'smoking': np.random.choice([0, 1], 500),\n","    'bmi': np.round(np.random.uniform(18, 40, 500), 1),\n","    'gender': np.random.choice(['Male', 'Female'], 500),\n","    'disease': np.random.choice([0, 1], 500)  # 0 = No Disease, 1 = Disease\n","})\n","\n","data.to_csv(\"patient_data.csv\", index=False)\n","data.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"T_18WrvPrOwj","executionInfo":{"status":"ok","timestamp":1746888622764,"user_tz":-330,"elapsed":286,"user":{"displayName":"Meiyanathan P","userId":"08069213971975995928"}},"outputId":"59ece21c-127d-4fd7-94c5-4f5b5b5a481d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age  glucose  blood_pressure  cholesterol  smoking   bmi  gender  disease\n","0   58      126             125          293        0  27.1    Male        1\n","1   71      105              69          112        0  36.2  Female        1\n","2   48       89              64          145        0  34.1    Male        1\n","3   34      134             133          254        1  34.9  Female        0\n","4   62       77              97          212        0  18.2  Female        0"],"text/html":["\n","  <div id=\"df-b9980c45-3ea2-4a98-a6fa-c456b0df2756\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>glucose</th>\n","      <th>blood_pressure</th>\n","      <th>cholesterol</th>\n","      <th>smoking</th>\n","      <th>bmi</th>\n","      <th>gender</th>\n","      <th>disease</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>58</td>\n","      <td>126</td>\n","      <td>125</td>\n","      <td>293</td>\n","      <td>0</td>\n","      <td>27.1</td>\n","      <td>Male</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>71</td>\n","      <td>105</td>\n","      <td>69</td>\n","      <td>112</td>\n","      <td>0</td>\n","      <td>36.2</td>\n","      <td>Female</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>48</td>\n","      <td>89</td>\n","      <td>64</td>\n","      <td>145</td>\n","      <td>0</td>\n","      <td>34.1</td>\n","      <td>Male</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>34</td>\n","      <td>134</td>\n","      <td>133</td>\n","      <td>254</td>\n","      <td>1</td>\n","      <td>34.9</td>\n","      <td>Female</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>62</td>\n","      <td>77</td>\n","      <td>97</td>\n","      <td>212</td>\n","      <td>0</td>\n","      <td>18.2</td>\n","      <td>Female</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9980c45-3ea2-4a98-a6fa-c456b0df2756')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b9980c45-3ea2-4a98-a6fa-c456b0df2756 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b9980c45-3ea2-4a98-a6fa-c456b0df2756');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-d40bd258-6827-43e8-9747-1095d7f80925\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d40bd258-6827-43e8-9747-1095d7f80925')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-d40bd258-6827-43e8-9747-1095d7f80925 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 20,\n        \"max\": 79,\n        \"num_unique_values\": 60,\n        \"samples\": [\n          58,\n          27,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37,\n        \"min\": 70,\n        \"max\": 199,\n        \"num_unique_values\": 128,\n        \"samples\": [\n          91,\n          186,\n          170\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22,\n        \"min\": 60,\n        \"max\": 139,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          119,\n          125,\n          79\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 58,\n        \"min\": 100,\n        \"max\": 298,\n        \"num_unique_values\": 188,\n        \"samples\": [\n          118,\n          188,\n          255\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.350515971652413,\n        \"min\": 18.1,\n        \"max\": 40.0,\n        \"num_unique_values\": 198,\n        \"samples\": [\n          39.3,\n          30.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"V8n_FCQpvD2S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# New Section"],"metadata":{"id":"A1fGABWTrN9o"}},{"cell_type":"code","source":["# Install libraries (only if not already installed)\n","# !pip install matplotlib seaborn scikit-learn pandas\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","\n","# Load dataset\n","df = pd.read_csv(\"patient_data.csv\")\n","\n","# Encode categorical variables\n","le = LabelEncoder()\n","df['gender'] = le.fit_transform(df['gender'])\n","\n","# Features & Target\n","X = df.drop(\"disease\", axis=1)\n","y = df[\"disease\"]\n","\n","# Scaling\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# Train-Test Split\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, stratify=y, random_state=42)\n","\n","# Models\n","models = {\n","    \"Random Forest\": RandomForestClassifier(),\n","    \"Logistic Regression\": LogisticRegression(),\n","    \"SVM\": SVC(probability=True)\n","}\n","\n","# Evaluation\n","results = {}\n","for name, model in models.items():\n","    model.fit(X_train, y_train)\n","    y_pred = model.predict(X_test)\n","    results[name] = {\n","        \"Accuracy\": accuracy_score(y_test, y_pred),\n","        \"Precision\": precision_score(y_test, y_pred),\n","        \"Recall\": recall_score(y_test, y_pred),\n","        \"F1 Score\": f1_score(y_test, y_pred)\n","    }\n","\n","# Convert results to DataFrame\n","results_df = pd.DataFrame(results).T\n","print(results_df)\n","\n","# Bar Chart Comparison\n","results_df.plot(kind=\"bar\", figsize=(10,6))\n","plt.title(\"Model Performance Comparison\")\n","plt.ylabel(\"Score\")\n","plt.ylim(0, 1)\n","plt.grid(True)\n","plt.xticks(rotation=0)\n","plt.legend(loc='lower right')\n","plt.show()\n"],"metadata":{"id":"Cmo8n6QnrURX","executionInfo":{"status":"ok","timestamp":1746888657319,"user_tz":-330,"elapsed":1824,"user":{"displayName":"Meiyanathan P","userId":"08069213971975995928"}},"outputId":"a84c6099-3b6a-487c-bb43-849dbb72e418","colab":{"base_uri":"https://localhost:8080/","height":504}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                     Accuracy  Precision    Recall  F1 Score\n","Random Forest            0.48   0.463415  0.387755  0.422222\n","Logistic Regression      0.55   0.545455  0.489796  0.516129\n","SVM                      0.55   0.541667  0.530612  0.536082\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}